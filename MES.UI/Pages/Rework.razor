@page "/rework"
@using MES.Common
@inject HttpClient Http

<PageTitle>Rework</PageTitle>

<div class="container mt-4">
    <h1>Rework Part</h1>
    <div class="mb-3">
        <label for="serialInput" class="form-label">Serial Number</label>
        <input id="serialInput" class="form-control" @bind="serialNumber" />
    </div>
    <button class="btn btn-primary mb-3 top-row-color" @onclick="SearchPart">Search</button>

    @if (isSearching)
    {
        <div class="d-flex justify-content-center">
            <ProgressIndicator IsVisible="@isSearching" />
        </div>
    }
    else if (searchError != null)
    {
        <div class="alert alert-danger">@searchError</div>
    }
    else if (foundPart != null)
    {
        <div class="d-flex flex-column align-items-center">
            <PartDetails Part="foundPart" />
            <div class="mt-3 d-flex gap-2">
                <button class="btn btn-success top-row-color text-white flex-fill" @onclick='() => UpdateStatus("Good")'>Mark Good
                </button>
                <button class="btn btn-danger top-row-color text-white flex-fill" @onclick='() => UpdateStatus("Bad")'>Mark Bad
                </button>
            </div>
        </div>
        @* @if (updateMessage != null)
        {
            <div class="alert alert-info mt-2">@updateMessage</div>
        } *@
    }
</div>

@code {
    private string serialNumber = string.Empty;
    private PartDataDto? foundPart;
    private bool isSearching = false;
    private string? searchError;
    private string? updateMessage;

    private async Task SearchPart()
    {
        isSearching = true;
        searchError = null;
        foundPart = null;
        updateMessage = null;

        try
        {
            foundPart = await Http.GetFromJsonAsync<PartDataDto>($"https://localhost:7195/api/PartData/GetBySerial/{serialNumber}");
            await Task.Delay(1000);
            if (foundPart == null)
            {
                searchError = "Part not found.";
            }
        }
        catch (Exception ex)
        {
            searchError = $"Error: {ex.Message}";
        }
        finally
        {
            isSearching = false;
        }
    }

    private async Task UpdateStatus(string status)
    {
        if (foundPart == null)
            return;

        try
        {
            foundPart.Status = status;
            var response = await Http.PutAsJsonAsync($"https://localhost:7195/api/PartData/UpdateBySerial/{foundPart.SerialNumber}", foundPart);
            if (response.IsSuccessStatusCode)
            {
                updateMessage = $"Status updated to '{status}'.";
            }
            else
            {
                updateMessage = $"Failed to update status.";
            }
        }
        catch (Exception ex)
        {
            updateMessage = $"Error: {ex.Message}";
        }
    }
}
