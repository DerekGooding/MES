@page "/"
@using MES.Common
@inject IJSRuntime JS
@inject HttpClient Http

<PageTitle>Home</PageTitle>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <ProgressIndicator IsVisible="@isLoading" />
    </div>
}
else if (errorMessage != null)
{
    <p class="text-danger">Failed to load part counts.</p>
    <p class="text-danger">@errorMessage</p>
}
else
{

    <div class="container mt-4">
        <h1 class="mb-4">Dashboard</h1>

        <!-- Counters Section -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card text-center shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Completed</h5>
                        <p class="display-6">@partCount.TotalParts</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">In Process</h5>
                        <p class="display-6">@partCount.InProcessParts</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Good</h5>
                        <p class="display-6 text-success">@partCount.GoodParts</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Bad</h5>
                        <p class="display-6 text-danger">@partCount.BadParts</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Graphs Section (Placeholder) -->
        <div class="row">
            <div class="col-md-12">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Production Trends</h5>
                        <div style="height:300px; display:flex; align-items:center; justify-content:center; background:#f8f9fa; border-radius:8px;">
                            <div class="chart-container">
                                <canvas id="myPieChart" width="250" height="250"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}

@code {
    private PartCountDto? partCount;
    private bool isLoading = true;
    private string? errorMessage;
    private double[]? data;
    private string[] labels = new[] { "Total", "Good", "Bad" };
    private string[]? colors = new[] { "#4e73df", "#1cc88a", "#e74a3b" };
    private bool chartRendered = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            partCount = await Http.GetFromJsonAsync<PartCountDto>("https://localhost:7195/api/PartData/PartCounts");
            await Task.Delay(1000);
            if (partCount != null)
            {
                data = new double[] { partCount.TotalParts, partCount.GoodParts, partCount.BadParts };
            }
        }
        catch (Exception ex)
        {
            errorMessage = ($"Error fetching part counts: {ex.Message}");
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (partCount != null && data != null && !chartRendered)
        {
            try
            {

                await JS.InvokeVoidAsync(
                    "renderPieChart",
                    "myPieChart",
                    labels,
                    data,
                    colors);
                chartRendered = true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"JS Interop error: {ex.Message}");
            }
        }
    }

}